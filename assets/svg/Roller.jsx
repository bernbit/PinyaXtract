import React, { useEffect } from "react";
import Svg, { G, Path, Mask, Rect, Defs, ClipPath } from "react-native-svg";
import Animated, {
  useSharedValue,
  useAnimatedProps,
  withRepeat,
  withTiming,
  Easing,
} from "react-native-reanimated";
import useGlobal from "@/context/GlobalContext";

import Helpers from "@/constants/Helpers-Constant";
import { useIsFocused } from "@react-navigation/native";

const Roller = ({ width = 328, height = 152 }) => {
  const { rollerSpeed, machineState } = useGlobal();
  const isFocused = useIsFocused();

  const dashOffsetFinal = Helpers.getRangeValue(
    rollerSpeed,
    0,
    255,
    0,
    243.137,
  );
  const rollerDuration = Helpers.getRangeValue(rollerSpeed, 0, 255, 2000, 1300);

  const gearRotation = useSharedValue(0);
  const dashOffset = useSharedValue(0);

  const SmallGear = Animated.createAnimatedComponent(Path);
  const LargeGear = Animated.createAnimatedComponent(Path);
  const Belt = Animated.createAnimatedComponent(Path);

  //* useEffect for Gear Animation
  useEffect(() => {
    if (!isFocused) {
      gearRotation.value = withTiming(0, { duration: 200 });
      dashOffset.value = withTiming(0, { duration: 200 });

      return;
    }

    if (machineState && rollerSpeed !== 0) {
      gearRotation.value = 0; // Reset rotation
      gearRotation.value = withRepeat(
        withTiming(360, { duration: rollerDuration, easing: Easing.linear }),
        -1,
        false,
      );

      dashOffset.value = 0;
      dashOffset.value = withRepeat(
        withTiming(243.137, {
          duration: rollerDuration,
          easing: Easing.linear,
        }),
        -1,
        false,
      );
    } else {
      gearRotation.value = withTiming(0, { duration: 200 });
      dashOffset.value = withTiming(0, { duration: 200 });
    }
  }, [machineState, rollerSpeed]);

  const largeGearAnimation = useAnimatedProps(() => ({
    transform: [
      { translateX: 74.764 },
      { translateY: 76.187 },
      { rotate: `${gearRotation.value}deg` },
      { translateX: -74.764 },
      { translateY: -76.187 },
    ],
  }));

  const smallGearAnimation = useAnimatedProps(() => ({
    transform: [
      { translateX: 270 },
      { translateY: 78.5 },
      { rotate: `${gearRotation.value}deg` },
      { translateX: -270 },
      { translateY: -78.5 },
    ],
  }));

  const beltAnimation = useAnimatedProps(() => ({
    strokeDashoffset: dashOffset.value,
  }));

  return (
    <Svg
      width={width}
      height={height}
      viewBox="0 0 328 152"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <G clipPath="url(#a)">
        <Path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M112.25 39.75A51.4 51.4 0 0086.1 25a51 51 0 00-29.83 2.44 51.66 51.66 0 00-23.47 18.8 52.62 52.62 0 00-1 57.95 51.72 51.72 0 0022.8 19.63 51.01 51.01 0 0029.73 3.5 51.35 51.35 0 0026.64-13.82 52.51 52.51 0 0015.71-36.6 52.56 52.56 0 00-14.43-37.15zm182.49 15.59a34.16 34.16 0 00-17.38-9.8 33.9 33.9 0 00-19.83 1.63 34.34 34.34 0 00-15.6 12.5 34.96 34.96 0 00-.66 38.51 34.38 34.38 0 0015.15 13.04 33.9 33.9 0 0037.47-6.86 34.9 34.9 0 0010.44-24.33 34.93 34.93 0 00-9.6-24.69z"
          fill="#2B2B2B"
        />
        {/* Large Gear */}
        <LargeGear
          fillRule="evenodd"
          clipRule="evenodd"
          animatedProps={largeGearAnimation}
          transform="rotate(1, 74.764, 76.187)"
          d="M96.2829 105.359L91.6687 101.912C91.2702 101.615 90.7957 101.441 90.3017 101.41C89.8078 101.378 89.3155 101.492 88.8838 101.737C86.6366 103.01 84.2303 103.971 81.7297 104.596C81.2442 104.717 80.8041 104.979 80.4633 105.349C80.1225 105.719 79.8957 106.182 79.8106 106.681L78.8379 112.374L69.5939 112.211L68.7399 106.47C68.6662 105.974 68.4527 105.511 68.1251 105.135C67.7974 104.759 67.3696 104.487 66.8928 104.351C64.4134 103.644 62.0391 102.603 59.8335 101.257C59.4055 100.995 58.9116 100.866 58.412 100.883C57.9124 100.901 57.4288 101.066 57.0202 101.358L52.3539 104.686L45.9339 97.9595L49.3403 93.2909C49.6339 92.8877 49.8063 92.4075 49.837 91.9078C49.8677 91.4081 49.7554 90.91 49.5134 90.4732C48.2554 88.1993 47.3051 85.7647 46.6881 83.2347C46.5682 82.7435 46.3094 82.2982 45.9434 81.9533C45.5774 81.6085 45.1201 81.379 44.6272 81.2929L39 80.3088L39.1614 70.9558L44.8354 70.092C45.3251 70.0174 45.7833 69.8014 46.1547 69.47C46.5262 69.1385 46.7952 68.7056 46.9296 68.2233C47.6283 65.7146 48.6569 63.3122 49.9878 61.0806C50.246 60.6476 50.3741 60.1477 50.3562 59.6422C50.3384 59.1368 50.1754 58.6475 49.8872 58.2341L46.5976 53.5129L53.2458 47.0171L57.8603 50.4641C58.2587 50.7611 58.7333 50.9356 59.2272 50.9667C59.7212 50.9977 60.2135 50.8841 60.6452 50.6393C62.8917 49.3658 65.2972 48.4035 67.7971 47.7783C68.2827 47.6571 68.7228 47.3954 69.0637 47.0251C69.4046 46.6549 69.6315 46.1922 69.7167 45.6936L70.6893 40L79.9333 40.1633L80.787 45.9042C80.8607 46.3997 81.0742 46.8632 81.4018 47.2391C81.7294 47.6149 82.1573 47.8871 82.634 48.0231C85.1135 48.7298 87.4879 49.7705 89.6934 51.1173C90.1214 51.3786 90.6154 51.5082 91.115 51.4901C91.6146 51.472 92.0982 51.3072 92.5067 51.0156L97.1729 47.6872L103.593 54.4141L100.187 59.0831C99.893 59.4862 99.7205 59.9664 99.6898 60.4661C99.6591 60.9659 99.7715 61.464 100.013 61.9008C101.272 64.1738 102.223 66.6077 102.841 69.137C102.961 69.6283 103.22 70.0736 103.585 70.4185C103.951 70.7635 104.409 70.993 104.901 71.0792L110.529 72.0633L110.367 81.4163L104.693 82.2804C104.203 82.355 103.745 82.571 103.374 82.9025C103.002 83.234 102.733 83.6669 102.599 84.1492C101.9 86.6579 100.872 89.0603 99.5406 91.2919C99.2822 91.7249 99.1541 92.2248 99.1718 92.7303C99.1896 93.2359 99.3526 93.7253 99.6407 94.1387L102.93 98.8596L96.2829 105.359ZM78.3401 96.1898C82.2497 95.4745 85.8619 93.6022 88.7199 90.8098L88.7185 90.8083C92.5451 87.061 94.7465 81.9309 94.8398 76.5436C94.9331 71.1562 92.9106 65.9513 89.2161 62.0707C86.4562 59.1789 82.9109 57.1801 79.0283 56.3271C75.1457 55.4741 71.1003 55.8051 67.4036 57.2783C63.707 58.7516 60.5251 61.3009 58.2604 64.6038C55.9957 67.9067 54.7499 71.8149 54.6805 75.8342C54.6111 79.8535 55.7213 83.8034 57.8706 87.1843C60.0199 90.5653 63.1118 93.2254 66.7553 94.8284C70.3989 96.4313 74.4304 96.9051 78.3401 96.1898Z"
          fill="#30F353"
        />

        {/* Small Gear */}
        <SmallGear
          fillRule="evenodd"
          clipRule="evenodd"
          animatedProps={smallGearAnimation}
          transform="rotate(200, 270, 78.5)"
          d="M282.034 95.0257L279.453 93.0731C279.23 92.9049 278.965 92.8061 278.689 92.7885C278.413 92.7709 278.137 92.8352 277.896 92.9739C276.639 93.6951 275.294 94.2398 273.895 94.5934C273.624 94.6621 273.378 94.8104 273.187 95.0202C272.996 95.23 272.87 95.4921 272.822 95.7746L272.278 99L267.109 98.9075L266.631 95.6551C266.59 95.3743 266.47 95.1118 266.287 94.8989C266.104 94.6859 265.865 94.5317 265.598 94.4547C264.212 94.0542 262.884 93.4646 261.65 92.7018C261.411 92.5537 261.135 92.4803 260.855 92.4905C260.576 92.5006 260.306 92.5939 260.077 92.759L257.468 94.6446L253.878 90.834L255.782 88.1892C255.947 87.9609 256.043 87.6888 256.06 87.4057C256.077 87.1226 256.015 86.8405 255.879 86.593C255.176 85.3049 254.644 83.9257 254.299 82.4924C254.232 82.2141 254.088 81.9619 253.883 81.7665C253.678 81.5712 253.422 81.4412 253.147 81.3924L250 80.8349L250.09 75.5364L253.263 75.0471C253.537 75.0049 253.793 74.8825 254.001 74.6947C254.209 74.5069 254.359 74.2617 254.434 73.9885C254.825 72.5673 255.4 71.2064 256.145 69.9422C256.289 69.6968 256.361 69.4137 256.351 69.1273C256.341 68.841 256.249 68.5638 256.088 68.3296L254.249 65.655L257.966 61.9752L260.547 63.9279C260.77 64.0962 261.035 64.195 261.311 64.2126C261.588 64.2302 261.863 64.1658 262.104 64.0272C263.361 63.3057 264.706 62.7606 266.104 62.4064C266.375 62.3377 266.621 62.1895 266.812 61.9797C267.003 61.77 267.13 61.5079 267.177 61.2254L267.721 58L272.891 58.0925L273.368 61.3447C273.409 61.6255 273.529 61.888 273.712 62.1009C273.895 62.3138 274.134 62.4681 274.401 62.5451C275.787 62.9454 277.115 63.535 278.349 64.2979C278.588 64.446 278.864 64.5194 279.144 64.5091C279.423 64.4989 279.693 64.4055 279.922 64.2403L282.531 62.3548L286.122 66.1656L284.216 68.8106C284.052 69.0389 283.956 69.3109 283.939 69.594C283.922 69.8771 283.984 70.1593 284.12 70.4068C284.824 71.6944 285.355 73.0732 285.701 74.5061C285.768 74.7844 285.913 75.0367 286.117 75.2321C286.322 75.4275 286.578 75.5575 286.853 75.6064L290 76.1639L289.91 81.4623L286.737 81.9518C286.463 81.9941 286.206 82.1165 285.999 82.3042C285.791 82.492 285.641 82.7373 285.565 83.0105C285.175 84.4317 284.6 85.7926 283.855 87.0568C283.711 87.3022 283.639 87.5853 283.649 87.8717C283.659 88.1581 283.75 88.4353 283.911 88.6695L285.751 91.3439L282.034 95.0257ZM272 89.8315C274.186 89.4263 276.206 88.3656 277.804 86.7837L277.803 86.7829C279.943 84.66 281.174 81.7539 281.227 78.7019C281.279 75.65 280.148 72.7014 278.082 70.503C276.538 68.8648 274.556 67.7325 272.384 67.2493C270.213 66.7661 267.951 66.9536 265.884 67.7882C263.817 68.6228 262.037 70.0669 260.771 71.938C259.504 73.8091 258.808 76.0231 258.769 78.3001C258.73 80.577 259.351 82.8146 260.553 84.7299C261.755 86.6452 263.484 88.1522 265.521 89.0602C267.559 89.9683 269.813 90.2367 272 89.8315Z"
          fill="#30F353"
        />
        <Path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M308.14 42.24a52.52 52.52 0 00-34.28-16.17L86.32 5.89a70.2 70.2 0 00-31.64 2.17A69.14 69.14 0 0026.4 24.89C-1.44 52.1-2.22 97.15 24.67 125.32a69.62 69.62 0 0026.97 17.62 68.94 68.94 0 0031.91 3.52l187.6-13.56c10.3-.2 20.3-3.43 28.8-9.3A53.38 53.38 0 00319 99.82c3.93-9.62 5-20.2 3.06-30.43a53.72 53.72 0 00-13.92-27.16zM19.02 84.1a57.62 57.62 0 0015.35 31.75 56.58 56.58 0 0022.01 14.27 56.04 56.04 0 0026 2.75l188.1-13.6a39.08 39.08 0 0027.27-11.43 40.07 40.07 0 0011.75-27.38 40.12 40.12 0 00-10.34-27.96 39.2 39.2 0 00-26.64-12.85L84.55 19.42A56.1 56.1 0 0050 24.58a57 57 0 00-25.01 24.68 57.94 57.94 0 00-5.96 34.83z"
          fill="#30F353"
        />
        <Mask
          id="a"
          maskUnits="userSpaceOnUse"
          x={0}
          y={0}
          width={328}
          height={152}
          fill="#000"
        >
          <Path fill="#fff" d="M0 0h328v152H0z" />
          <Path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M308.14 42.24a52.52 52.52 0 00-34.28-16.17L86.32 5.89a70.2 70.2 0 00-31.64 2.17A69.14 69.14 0 0026.4 24.89C-1.44 52.1-2.22 97.15 24.67 125.32a69.62 69.62 0 0026.97 17.62 68.94 68.94 0 0031.91 3.52l187.6-13.56c10.3-.2 20.3-3.43 28.8-9.3A53.38 53.38 0 00319 99.82c3.93-9.62 5-20.2 3.06-30.43a53.72 53.72 0 00-13.92-27.16z"
          />
        </Mask>
        <Belt
          animatedProps={beltAnimation}
          clipRule="evenodd"
          d="M308.14 42.24a52.52 52.52 0 00-34.28-16.17L86.32 5.89a70.2 70.2 0 00-31.64 2.17A69.14 69.14 0 0026.4 24.89C-1.44 52.1-2.22 97.15 24.67 125.32a69.62 69.62 0 0026.97 17.62 68.94 68.94 0 0031.91 3.52l187.6-13.56c10.3-.2 20.3-3.43 28.8-9.3A53.38 53.38 0 00319 99.82c3.93-9.62 5-20.2 3.06-30.43a53.72 53.72 0 00-13.92-27.16z"
          stroke="#30F353"
          strokeWidth={10}
          strokeLinejoin="round"
          strokeDasharray="10 20"
          strokeDashoffset={dashOffsetFinal}
          mask="url(#a)"
        />
      </G>
      <Defs>
        <ClipPath id="a">
          <Path fill="#fff" d="M0 0h328v152H0z" />
        </ClipPath>
      </Defs>
    </Svg>
  );
};
export default React.memo(Roller);
